// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.18034
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace PayrollLibrary.PayrollExamplesSpec
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("")]
    public partial class Feature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "PayrollProcessExamples.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "", "In order to check payroll calculation\r\nAs a payroll user\r\nI want to test payroll " +
                    "with 50 examples in table", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Payroll for employment")]
        [NUnit.Framework.TestCaseAttribute("01-PP-Mzda-DanPoj-SlevyZaklad", "01 2013", "40", "0", "CZK 15000", "DECLARE", "YES", "YES", "YES", "NO", "YES", "0", "NO:NO:NO", "NO", "YES", "YES", "CZK 15000", "CZK 5100", "CZK 20100", "CZK 15000", "CZK 15000", "CZK 675", "CZK 975", "CZK 3015", "CZK 2070", "CZK 945", "CZK 0", "CZK 945", "CZK 945", "CZK 0", "CZK 15000", "CZK 12405", null)]
        [NUnit.Framework.TestCaseAttribute("02-PP-Mzda-DanPoj-SlevyDite1", "01 2013", "40", "0", "CZK 15600", "DECLARE", "YES", "YES", "YES", "NO", "YES", "1", "NO:NO:NO", "NO", "YES", "YES", "CZK 15600", "CZK 5304", "CZK 21000", "CZK 15600", "CZK 15600", "CZK 702", "CZK 1014", "CZK 3150", "CZK 2070", "CZK 1080", "CZK 1080", "CZK 0", "CZK 0", "CZK 0", "CZK 15600", "CZK 13884", null)]
        [NUnit.Framework.TestCaseAttribute("03-PP-Mzda-DanPoj-BonusDite1", "01 2013", "40", "0", "CZK 15000", "DECLARE", "YES", "YES", "YES", "NO", "YES", "1", "NO:NO:NO", "NO", "YES", "YES", "CZK 15000", "CZK 5100", "CZK 20100", "CZK 15000", "CZK 15000", "CZK 675", "CZK 975", "CZK 3015", "CZK 2070", "CZK 945", "CZK 945", "CZK 0", "CZK 0", "CZK 172", "CZK 15000", "CZK 13522", null)]
        [NUnit.Framework.TestCaseAttribute("04-PP-Mzda-DanPoj-BonusDite2", "01 2013", "40", "0", "CZK 15000", "DECLARE", "YES", "YES", "YES", "NO", "YES", "2", "NO:NO:NO", "NO", "YES", "YES", "CZK 15000", "CZK 5100", "CZK 20100", "CZK 15000", "CZK 15000", "CZK 675", "CZK 975", "CZK 3015", "CZK 2070", "CZK 945", "CZK 945", "CZK 0", "CZK 0", "CZK 1289", "CZK 15000", "CZK 14639", null)]
        [NUnit.Framework.TestCaseAttribute("05-PP-Mzda-DanPoj-MaxBonus", "01 2013", "40", "0", "CZK 10000", "DECLARE", "YES", "YES", "YES", "NO", "YES", "7", "NO:NO:NO", "NO", "YES", "YES", "CZK 10000", "CZK 3400", "CZK 13400", "CZK 10000", "CZK 10000", "CZK 450", "CZK 650", "CZK 2010", "CZK 2010", "CZK 0", "CZK 0", "CZK 0", "CZK 0", "CZK 5025", "CZK 10000", "CZK 13925", null)]
        [NUnit.Framework.TestCaseAttribute("06-PP-Mzda-DanPoj-MinZdrav", "01 2013", "40", "0", "CZK 7800", "DECLARE", "YES", "YES", "YES", "NO", "YES", "0", "NO:NO:NO", "NO", "YES", "YES", "CZK 7800", "CZK 2652", "CZK 10500", "CZK 8000", "CZK 7800", "CZK 378", "CZK 507", "CZK 1575", "CZK 1575", "CZK 0", "CZK 0", "CZK 0", "CZK 0", "CZK 0", "CZK 7800", "CZK 6915", null)]
        [NUnit.Framework.TestCaseAttribute("07-PP-Mzda-DanPoj-MaxZdrav12", "01 2013", "40", "0", "CZK 1809964", "DECLARE", "YES", "YES", "YES", "NO", "YES", "0", "NO:NO:NO", "NO", "YES", "YES", "CZK 1809964", "CZK 473505", "CZK 2283500", "CZK 1809964", "CZK 1242432", "CZK 81449", "CZK 80759", "CZK 461975", "CZK 2070", "CZK 459905", "CZK 0", "CZK 459905", "CZK 459905", "CZK 0", "CZK 1809964", "CZK 1187851", null)]
        [NUnit.Framework.TestCaseAttribute("08-PP-Mzda-DanPoj-MaxSocial12", "01 2013", "40", "0", "CZK 1206676", "DECLARE", "YES", "YES", "YES", "NO", "YES", "0", "NO:NO:NO", "NO", "YES", "YES", "CZK 1206676", "CZK 410270", "CZK 1617000", "CZK 1206676", "CZK 1206676", "CZK 54301", "CZK 78434", "CZK 319770", "CZK 2070", "CZK 317700", "CZK 0", "CZK 317700", "CZK 317700", "CZK 0", "CZK 1206676", "CZK 756241", null)]
        [NUnit.Framework.TestCaseAttribute("09-PP-Mzda-DanPoj-MaxSocial13", "01 2013", "40", "0", "CZK 1242532", "DECLARE", "YES", "YES", "YES", "NO", "YES", "0", "NO:NO:NO", "NO", "YES", "YES", "CZK 1242532", "CZK 422436", "CZK 1665000", "CZK 1242532", "CZK 1242432", "CZK 55914", "CZK 80759", "CZK 329480", "CZK 2070", "CZK 327410", "CZK 0", "CZK 327410", "CZK 327410", "CZK 0", "CZK 1242532", "CZK 778449", null)]
        [NUnit.Framework.TestCaseAttribute("10-PP-Mzda-DanPoj-Neodpr064", "01 2013", "40", "46", "CZK 20000", "DECLARE", "YES", "YES", "YES", "NO", "YES", "0", "NO:NO:NO", "NO", "YES", "YES", "CZK 15000", "CZK 5100", "CZK 20100", "CZK 15000", "CZK 15000", "CZK 675", "CZK 975", "CZK 3015", "CZK 2070", "CZK 945", "CZK 0", "CZK 945", "CZK 945", "CZK 0", "CZK 15000", "CZK 12405", null)]
        [NUnit.Framework.TestCaseAttribute("22-PP-Mzda-DanPoj-SolidarDan", "01 2013", "40", "0", "CZK 104536", "DECLARE", "YES", "YES", "YES", "NO", "YES", "0", "NO:NO:NO", "NO", "YES", "YES", "CZK 104536", "CZK 35542", "CZK 140100", "CZK 104536", "CZK 104536", "CZK 4705", "CZK 6795", "CZK 21085", "CZK 2070", "CZK 19015", "CZK 0", "CZK 19015", "CZK 19015", "CZK 0", "CZK 104536", "CZK 74021", null)]
        [NUnit.Framework.TestCaseAttribute("23-PP-Mzda-DanPoj-DuchSpor", "01 2013", "40", "0", "CZK 15000", "DECLARE", "YES", "YES", "YES", "NO", "YES", "0", "NO:NO:NO", "NO", "YES", "YES", "CZK 15000", "CZK 5100", "CZK 20100", "CZK 15000", "CZK 15000", "CZK 675", "CZK 975", "CZK 3015", "CZK 2070", "CZK 945", "CZK 0", "CZK 945", "CZK 945", "CZK 0", "CZK 15000", "CZK 12405", null)]
        [NUnit.Framework.TestCaseAttribute("27-PP-Mzda-DanPoj-SlevyInv1", "01 2013", "40", "0", "CZK 20000", "DECLARE", "YES", "YES", "YES", "NO", "YES", "0", "YES:NO:NO", "NO", "YES", "YES", "CZK 20000", "CZK 6800", "CZK 26800", "CZK 20000", "CZK 20000", "CZK 900", "CZK 1300", "CZK 4020", "CZK 2280", "CZK 1740", "CZK 0", "CZK 1740", "CZK 1740", "CZK 0", "CZK 20000", "CZK 16060", null)]
        [NUnit.Framework.TestCaseAttribute("28-PP-Mzda-DanPoj-SlevyInv2", "01 2013", "40", "0", "CZK 15000", "DECLARE", "YES", "YES", "YES", "NO", "YES", "0", "NO:YES:NO", "NO", "YES", "YES", "CZK 15000", "CZK 5100", "CZK 20100", "CZK 15000", "CZK 15000", "CZK 675", "CZK 975", "CZK 3015", "CZK 2490", "CZK 525", "CZK 0", "CZK 525", "CZK 525", "CZK 0", "CZK 15000", "CZK 12825", null)]
        [NUnit.Framework.TestCaseAttribute("29-PP-Mzda-DanPoj-SlevyInv3", "01 2013", "40", "0", "CZK 15000", "DECLARE", "YES", "YES", "YES", "NO", "YES", "0", "NO:YES:NO", "NO", "YES", "YES", "CZK 15000", "CZK 5100", "CZK 20100", "CZK 15000", "CZK 15000", "CZK 675", "CZK 975", "CZK 3015", "CZK 2490", "CZK 525", "CZK 0", "CZK 525", "CZK 525", "CZK 0", "CZK 15000", "CZK 12825", null)]
        [NUnit.Framework.TestCaseAttribute("30-PP-Mzda-DanPoj-SlevyStud", "01 2013", "40", "0", "CZK 15000", "DECLARE", "YES", "YES", "YES", "NO", "YES", "0", "NO:NO:NO", "YES", "YES", "YES", "CZK 15000", "CZK 5100", "CZK 20100", "CZK 15000", "CZK 15000", "CZK 675", "CZK 975", "CZK 3015", "CZK 2405", "CZK 610", "CZK 0", "CZK 610", "CZK 610", "CZK 0", "CZK 15000", "CZK 12740", null)]
        [NUnit.Framework.TestCaseAttribute("31-PP-Mzda-DanPoj-SlevyZakl15", "01 2013", "40", "0", "CZK 15000", "DECLARE", "YES", "YES", "YES", "NO", "YES", "0", "NO:NO:NO", "NO", "YES", "YES", "CZK 15000", "CZK 5100", "CZK 20100", "CZK 15000", "CZK 15000", "CZK 675", "CZK 975", "CZK 3015", "CZK 2070", "CZK 945", "CZK 0", "CZK 945", "CZK 945", "CZK 0", "CZK 15000", "CZK 12405", null)]
        [NUnit.Framework.TestCaseAttribute("32-PP-Mzda-DanPoj-SlevyZakl20", "01 2013", "40", "0", "CZK 20000", "DECLARE", "YES", "YES", "YES", "NO", "YES", "0", "NO:NO:NO", "NO", "YES", "YES", "CZK 20000", "CZK 6800", "CZK 26800", "CZK 20000", "CZK 20000", "CZK 900", "CZK 1300", "CZK 4020", "CZK 2070", "CZK 1950", "CZK 0", "CZK 1950", "CZK 1950", "CZK 0", "CZK 20000", "CZK 15850", null)]
        [NUnit.Framework.TestCaseAttribute("33-PP-Mzda-DanPoj-SlevyZakl25", "01 2013", "40", "0", "CZK 25000", "DECLARE", "YES", "YES", "YES", "NO", "YES", "0", "NO:NO:NO", "NO", "YES", "YES", "CZK 25000", "CZK 8500", "CZK 33500", "CZK 25000", "CZK 25000", "CZK 1125", "CZK 1625", "CZK 5025", "CZK 2070", "CZK 2955", "CZK 0", "CZK 2955", "CZK 2955", "CZK 0", "CZK 25000", "CZK 19295", null)]
        [NUnit.Framework.TestCaseAttribute("34-PP-Mzda-DanPoj-SlevyZakl30", "01 2013", "40", "0", "CZK 30000", "DECLARE", "YES", "YES", "YES", "NO", "YES", "0", "NO:NO:NO", "NO", "YES", "YES", "CZK 30000", "CZK 10200", "CZK 40200", "CZK 30000", "CZK 30000", "CZK 1350", "CZK 1950", "CZK 6030", "CZK 2070", "CZK 3960", "CZK 0", "CZK 3960", "CZK 3960", "CZK 0", "CZK 30000", "CZK 22740", null)]
        [NUnit.Framework.TestCaseAttribute("35-PP-Mzda-DanPoj-SlevyZakl35", "01 2013", "40", "0", "CZK 35000", "DECLARE", "YES", "YES", "YES", "NO", "YES", "0", "NO:NO:NO", "NO", "YES", "YES", "CZK 35000", "CZK 11900", "CZK 46900", "CZK 35000", "CZK 35000", "CZK 1575", "CZK 2275", "CZK 7035", "CZK 2070", "CZK 4965", "CZK 0", "CZK 4965", "CZK 4965", "CZK 0", "CZK 35000", "CZK 26185", null)]
        [NUnit.Framework.TestCaseAttribute("36-PP-Mzda-DanPoj-SlevyZakl40", "01 2013", "40", "0", "CZK 40000", "DECLARE", "YES", "YES", "YES", "NO", "YES", "0", "NO:NO:NO", "NO", "YES", "YES", "CZK 40000", "CZK 13600", "CZK 53600", "CZK 40000", "CZK 40000", "CZK 1800", "CZK 2600", "CZK 8040", "CZK 2070", "CZK 5970", "CZK 0", "CZK 5970", "CZK 5970", "CZK 0", "CZK 40000", "CZK 29630", null)]
        [NUnit.Framework.TestCaseAttribute("37-PP-Mzda-DanPoj-SlevyZakl45", "01 2013", "40", "0", "CZK 45000", "DECLARE", "YES", "YES", "YES", "NO", "YES", "0", "NO:NO:NO", "NO", "YES", "YES", "CZK 45000", "CZK 15300", "CZK 60300", "CZK 45000", "CZK 45000", "CZK 2025", "CZK 2925", "CZK 9045", "CZK 2070", "CZK 6975", "CZK 0", "CZK 6975", "CZK 6975", "CZK 0", "CZK 45000", "CZK 33075", null)]
        [NUnit.Framework.TestCaseAttribute("38-PP-Mzda-DanPoj-SlevyZakl50", "01 2013", "40", "0", "CZK 50000", "DECLARE", "YES", "YES", "YES", "NO", "YES", "0", "NO:NO:NO", "NO", "YES", "YES", "CZK 50000", "CZK 17000", "CZK 67000", "CZK 50000", "CZK 50000", "CZK 2250", "CZK 3250", "CZK 10050", "CZK 2070", "CZK 7980", "CZK 0", "CZK 7980", "CZK 7980", "CZK 0", "CZK 50000", "CZK 36520", null)]
        [NUnit.Framework.TestCaseAttribute("39-PP-Mzda-DanPoj-SlevyZakl55", "01 2013", "40", "0", "CZK 55000", "DECLARE", "YES", "YES", "YES", "NO", "YES", "0", "NO:NO:NO", "NO", "YES", "YES", "CZK 55000", "CZK 18700", "CZK 73700", "CZK 55000", "CZK 55000", "CZK 2475", "CZK 3575", "CZK 11055", "CZK 2070", "CZK 8985", "CZK 0", "CZK 8985", "CZK 8985", "CZK 0", "CZK 55000", "CZK 39965", null)]
        [NUnit.Framework.TestCaseAttribute("40-PP-Mzda-DanPoj-SlevyZakl60", "01 2013", "40", "0", "CZK 60000", "DECLARE", "YES", "YES", "YES", "NO", "YES", "0", "NO:NO:NO", "NO", "YES", "YES", "CZK 60000", "CZK 20400", "CZK 80400", "CZK 60000", "CZK 60000", "CZK 2700", "CZK 3900", "CZK 12060", "CZK 2070", "CZK 9990", "CZK 0", "CZK 9990", "CZK 9990", "CZK 0", "CZK 60000", "CZK 43410", null)]
        [NUnit.Framework.TestCaseAttribute("41-PP-Mzda-DanPoj-SlevyZakl65", "01 2013", "40", "0", "CZK 65000", "DECLARE", "YES", "YES", "YES", "NO", "YES", "0", "NO:NO:NO", "NO", "YES", "YES", "CZK 65000", "CZK 22100", "CZK 87100", "CZK 65000", "CZK 65000", "CZK 2925", "CZK 4225", "CZK 13065", "CZK 2070", "CZK 10995", "CZK 0", "CZK 10995", "CZK 10995", "CZK 0", "CZK 65000", "CZK 46855", null)]
        [NUnit.Framework.TestCaseAttribute("42-PP-Mzda-DanPoj-SlevyZakl70", "01 2013", "40", "0", "CZK 70000", "DECLARE", "YES", "YES", "YES", "NO", "YES", "0", "NO:NO:NO", "NO", "YES", "YES", "CZK 70000", "CZK 23800", "CZK 93800", "CZK 70000", "CZK 70000", "CZK 3150", "CZK 4550", "CZK 14070", "CZK 2070", "CZK 12000", "CZK 0", "CZK 12000", "CZK 12000", "CZK 0", "CZK 70000", "CZK 50300", null)]
        [NUnit.Framework.TestCaseAttribute("43-PP-Mzda-DanPoj-SlevyZakl75", "01 2013", "40", "0", "CZK 75000", "DECLARE", "YES", "YES", "YES", "NO", "YES", "0", "NO:NO:NO", "NO", "YES", "YES", "CZK 75000", "CZK 25500", "CZK 100500", "CZK 75000", "CZK 75000", "CZK 3375", "CZK 4875", "CZK 15075", "CZK 2070", "CZK 13005", "CZK 0", "CZK 13005", "CZK 13005", "CZK 0", "CZK 75000", "CZK 53745", null)]
        [NUnit.Framework.TestCaseAttribute("44-PP-Mzda-DanPoj-SlevyZakl80", "01 2013", "40", "0", "CZK 80000", "DECLARE", "YES", "YES", "YES", "NO", "YES", "0", "NO:NO:NO", "NO", "YES", "YES", "CZK 80000", "CZK 27200", "CZK 107200", "CZK 80000", "CZK 80000", "CZK 3600", "CZK 5200", "CZK 16080", "CZK 2070", "CZK 14010", "CZK 0", "CZK 14010", "CZK 14010", "CZK 0", "CZK 80000", "CZK 57190", null)]
        [NUnit.Framework.TestCaseAttribute("45-PP-Mzda-DanPoj-SlevyZakl85", "01 2013", "40", "0", "CZK 85000", "DECLARE", "YES", "YES", "YES", "NO", "YES", "0", "NO:NO:NO", "NO", "YES", "YES", "CZK 85000", "CZK 28900", "CZK 113900", "CZK 85000", "CZK 85000", "CZK 3825", "CZK 5525", "CZK 17085", "CZK 2070", "CZK 15015", "CZK 0", "CZK 15015", "CZK 15015", "CZK 0", "CZK 85000", "CZK 60635", null)]
        [NUnit.Framework.TestCaseAttribute("46-PP-Mzda-DanPoj-SlevyZakl90", "01 2013", "40", "0", "CZK 90000", "DECLARE", "YES", "YES", "YES", "NO", "YES", "0", "NO:NO:NO", "NO", "YES", "YES", "CZK 90000", "CZK 30600", "CZK 120600", "CZK 90000", "CZK 90000", "CZK 4050", "CZK 5850", "CZK 18090", "CZK 2070", "CZK 16020", "CZK 0", "CZK 16020", "CZK 16020", "CZK 0", "CZK 90000", "CZK 64080", null)]
        [NUnit.Framework.TestCaseAttribute("47-PP-Mzda-DanPoj-SlevyZakl95", "01 2013", "40", "0", "CZK 95000", "DECLARE", "YES", "YES", "YES", "NO", "YES", "0", "NO:NO:NO", "NO", "YES", "YES", "CZK 95000", "CZK 32300", "CZK 127300", "CZK 95000", "CZK 95000", "CZK 4275", "CZK 6175", "CZK 19095", "CZK 2070", "CZK 17025", "CZK 0", "CZK 17025", "CZK 17025", "CZK 0", "CZK 95000", "CZK 67525", null)]
        [NUnit.Framework.TestCaseAttribute("48-PP-Mzda-DanPoj-SlevyZakl100", "01 2013", "40", "0", "CZK 100000", "DECLARE", "YES", "YES", "YES", "NO", "YES", "0", "NO:NO:NO", "NO", "YES", "YES", "CZK 100000", "CZK 34000", "CZK 134000", "CZK 100000", "CZK 100000", "CZK 4500", "CZK 6500", "CZK 20100", "CZK 2070", "CZK 18030", "CZK 0", "CZK 18030", "CZK 18030", "CZK 0", "CZK 100000", "CZK 70970", null)]
        [NUnit.Framework.TestCaseAttribute("49-PP-Mzda-DanPoj-SlevyZakl105", "01 2013", "40", "0", "CZK 105000", "DECLARE", "YES", "YES", "YES", "NO", "YES", "0", "NO:NO:NO", "NO", "YES", "YES", "CZK 105000", "CZK 35700", "CZK 140700", "CZK 105000", "CZK 105000", "CZK 4725", "CZK 6825", "CZK 21208", "CZK 2070", "CZK 19138", "CZK 0", "CZK 19138", "CZK 19138", "CZK 0", "CZK 105000", "CZK 74312", null)]
        [NUnit.Framework.TestCaseAttribute("50-PP-Mzda-DanPoj-SlevyZakl110", "01 2013", "40", "0", "CZK 110000", "DECLARE", "YES", "YES", "YES", "NO", "YES", "0", "NO:NO:NO", "NO", "YES", "YES", "CZK 110000", "CZK 37400", "CZK 147400", "CZK 110000", "CZK 110000", "CZK 4950", "CZK 7150", "CZK 22563", "CZK 2070", "CZK 20493", "CZK 0", "CZK 20493", "CZK 20493", "CZK 0", "CZK 110000", "CZK 77407", null)]
        [NUnit.Framework.TestCaseAttribute("12-PP-Mzda-NepodPoj-5000", "01 2013", "40", "0", "CZK 5000", "YES", "YES", "YES", "YES", "NO", "NO", "0", "NO:NO:NO", "NO", "YES", "YES", "CZK 5000", "CZK 1700", "CZK 0", "CZK 8000", "CZK 5000", "CZK 630", "CZK 325", "CZK 0", "CZK 0", "CZK 0", "CZK 0", "CZK 0", "CZK 0", "CZK 0", "CZK 5000", "CZK 3040", null)]
        [NUnit.Framework.TestCaseAttribute("13-PP-Mzda-NepodPoj-5001", "01 2013", "40", "0", "CZK 5001", "YES", "YES", "YES", "YES", "NO", "NO", "0", "NO:NO:NO", "NO", "YES", "YES", "CZK 5001", "CZK 1701", "CZK 6800", "CZK 8000", "CZK 5001", "CZK 630", "CZK 326", "CZK 1020", "CZK 0", "CZK 1020", "CZK 0", "CZK 1020", "CZK 1020", "CZK 0", "CZK 5001", "CZK 3025", null)]
        [NUnit.Framework.TestCaseAttribute("24-PP-Mzda-DanPoj-Dan099", "01 2013", "40", "0", "CZK 74", "DECLARE", "YES", "NO", "YES", "NO", "YES", "0", "NO:NO:NO", "NO", "YES", "YES", "CZK 74", "CZK 25", "CZK 99", "CZK 74", "CZK 74", "CZK 4", "CZK 5", "CZK 15", "CZK 15", "CZK 0", "CZK 0", "CZK 0", "CZK 0", "CZK 0", "CZK 74", "CZK 65", null)]
        [NUnit.Framework.TestCaseAttribute("25-PP-Mzda-DanPoj-Dan100", "01 2013", "40", "0", "CZK 75", "DECLARE", "YES", "NO", "YES", "NO", "YES", "0", "NO:NO:NO", "NO", "YES", "YES", "CZK 75", "CZK 26", "CZK 200", "CZK 75", "CZK 75", "CZK 4", "CZK 5", "CZK 30", "CZK 30", "CZK 0", "CZK 0", "CZK 0", "CZK 0", "CZK 0", "CZK 75", "CZK 66", null)]
        [NUnit.Framework.TestCaseAttribute("26-PP-Mzda-DanPoj-Dan101", "01 2013", "40", "0", "CZK 100", "DECLARE", "YES", "NO", "YES", "NO", "YES", "0", "NO:NO:NO", "NO", "YES", "YES", "CZK 100", "CZK 34", "CZK 200", "CZK 100", "CZK 100", "CZK 5", "CZK 7", "CZK 30", "CZK 30", "CZK 0", "CZK 0", "CZK 0", "CZK 0", "CZK 0", "CZK 100", "CZK 88", null)]
        [NUnit.Framework.TestCaseAttribute("11-PP-Mzda-DanPoj-Neodpr184", "01 2013", "40", "184", "CZK 20000", "DECLARE", "YES", "NO", "YES", "NO", "YES", "0", "NO:NO:NO", "NO", "YES", "YES", "CZK 0", "CZK 0", "CZK 0", "CZK 0", "CZK 0", "CZK 0", "CZK 0", "CZK 0", "CZK 0", "CZK 0", "CZK 0", "CZK 0", "CZK 0", "CZK 0", "CZK 0", "CZK 0", null)]
        public virtual void PayrollForEmployment(
                    string name, 
                    string period, 
                    string schedule, 
                    string absence, 
                    string salary, 
                    string taxPayer, 
                    string healthPayer, 
                    string healthMinim, 
                    string socialPayer, 
                    string pensionPayer, 
                    string taxPayerBenefit, 
                    string taxChildBenefit, 
                    string taxDisabilityBenefit, 
                    string taxStudyingBenefit, 
                    string healthEmployer, 
                    string socialEmployer, 
                    string taxIncome, 
                    string premiumInsurance, 
                    string taxBase, 
                    string healthBase, 
                    string socialBase, 
                    string healthIns, 
                    string socialIns, 
                    string taxBefore, 
                    string payerRelief, 
                    string taxAfterARelief, 
                    string childRelief, 
                    string taxAfterCRelief, 
                    string taxAdvance, 
                    string taxBonus, 
                    string grossIncome, 
                    string nettoIncome, 
                    string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Payroll for employment", exampleTags);
#line 6
  this.ScenarioSetup(scenarioInfo);
#line 7
    testRunner.Given(string.Format("Payroll process for payroll period {0}", period), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 8
    testRunner.And(string.Format("Employee works in Weekly schedule {0} hours", schedule), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 9
    testRunner.And(string.Format("Employee has {0} hours of absence", absence), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 10
    testRunner.And(string.Format("Employee Salary is {0} monthly", salary), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 11
    testRunner.And(string.Format("{0} Employee is Regular Tax payer", taxPayer), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 12
    testRunner.And(string.Format("{0} Employee is Regular Health insurance payer with {1}", healthPayer, healthMinim), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 13
    testRunner.And(string.Format("{0} Employee is Regular Social insurance payer", socialPayer), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 14
    testRunner.And(string.Format("{0} Employee is Regular Pension savings payer", pensionPayer), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 15
    testRunner.And(string.Format("{0} Employee claims tax benefit on tax payer", taxPayerBenefit), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 16
    testRunner.And(string.Format("Employee claims tax benefit on {0} child", taxChildBenefit), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 17
    testRunner.And(string.Format("{0} Employee claims tax benefit on disability", taxDisabilityBenefit), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 18
    testRunner.And(string.Format("{0} Employee claims tax benefit on preparing by studying", taxStudyingBenefit), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 19
    testRunner.And(string.Format("{0} Employee is Employer contribution for Health insurance payer", healthEmployer), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 20
    testRunner.And(string.Format("{0} Employee is Employer contribution for Social insurance payer", socialEmployer), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 21
    testRunner.When("Payroll process calculate results", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 22
    testRunner.Then(string.Format("Accounted tax income should be {0}", taxIncome), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 23
    testRunner.And(string.Format("Premium insurance should be {0}", premiumInsurance), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 24
    testRunner.And(string.Format("Tax base should be {0}", taxBase), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 25
    testRunner.And(string.Format("Accounted income for Health insurance should be {0}", healthBase), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 26
    testRunner.And(string.Format("Accounted income for Social insurance should be {0}", socialBase), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 27
    testRunner.And(string.Format("Contribution to Health insurance should be {0}", healthIns), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 28
    testRunner.And(string.Format("Contribution to Social insurance should be {0}", socialIns), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 29
    testRunner.And(string.Format("Tax advance before tax relief on payer should be {0}", taxBefore), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 30
    testRunner.And(string.Format("Tax relief on payer should be {0}", payerRelief), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 31
    testRunner.And(string.Format("Tax advance after relief on payer should be {0}", taxAfterARelief), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 32
    testRunner.And(string.Format("Tax relief on child should be {0}", childRelief), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 33
    testRunner.And(string.Format("Tax advance after relief on child should be {0}", taxAfterCRelief), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 34
    testRunner.And(string.Format("Tax advance should be {0}", taxAdvance), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 35
    testRunner.And(string.Format("Tax bonus should be {0}", taxBonus), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 36
    testRunner.And(string.Format("Gross income should be {0}", grossIncome), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 37
    testRunner.And(string.Format("Netto income should be {0}", nettoIncome), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Payroll for contract")]
        [NUnit.Framework.TestCaseAttribute("14-DPC-Mzda-2499-NeUcastZdrav", "01 2013", "40", "0", "CZK 2499", "YES", "YES", "NO", "YES", "NO", "YES", "0", "NO:NO:NO", "NO", "YES", "YES", "CZK 2499", "CZK 0", "CZK 2499", "CZK 0", "CZK 0", "CZK 0", "CZK 0", "CZK 375", "CZK 375", "CZK 0", "CZK 0", "CZK 0", "CZK 0", "CZK 0", "CZK 2499", "CZK 2499", null)]
        [NUnit.Framework.TestCaseAttribute("15-DPC-Mzda-2500-UcastZdrav", "01 2013", "40", "0", "CZK 2500", "YES", "YES", "NO", "YES", "NO", "YES", "0", "NO:NO:NO", "NO", "YES", "YES", "CZK 2500", "CZK 850", "CZK 3350", "CZK 2500", "CZK 2500", "CZK 113", "CZK 163", "CZK 510", "CZK 510", "CZK 0", "CZK 0", "CZK 0", "CZK 0", "CZK 0", "CZK 2500", "CZK 2224", null)]
        [NUnit.Framework.TestCaseAttribute("16-DPC-Mzda-2499-NeUcastNemoc", "01 2013", "40", "0", "CZK 2499", "YES", "YES", "NO", "YES", "NO", "YES", "0", "NO:NO:NO", "NO", "YES", "YES", "CZK 2499", "CZK 0", "CZK 2499", "CZK 0", "CZK 0", "CZK 0", "CZK 0", "CZK 375", "CZK 375", "CZK 0", "CZK 0", "CZK 0", "CZK 0", "CZK 0", "CZK 2499", "CZK 2499", null)]
        [NUnit.Framework.TestCaseAttribute("17-DPC-Mzda-2500-UcastNemoc", "01 2013", "40", "0", "CZK 2500", "YES", "YES", "NO", "YES", "NO", "YES", "0", "NO:NO:NO", "NO", "YES", "YES", "CZK 2500", "CZK 850", "CZK 3350", "CZK 2500", "CZK 2500", "CZK 113", "CZK 163", "CZK 510", "CZK 510", "CZK 0", "CZK 0", "CZK 0", "CZK 0", "CZK 0", "CZK 2500", "CZK 2224", null)]
        [NUnit.Framework.TestCaseAttribute("18-DPP-Mzda-2499-NeUcastZdrav", "01 2013", "40", "0", "CZK 2499", "YES", "YES", "NO", "YES", "NO", "YES", "0", "NO:NO:NO", "NO", "YES", "YES", "CZK 2499", "CZK 0", "CZK 2499", "CZK 0", "CZK 0", "CZK 0", "CZK 0", "CZK 375", "CZK 375", "CZK 0", "CZK 0", "CZK 0", "CZK 0", "CZK 0", "CZK 2499", "CZK 2499", null)]
        [NUnit.Framework.TestCaseAttribute("19-DPP-Mzda-2500-UcastZdrav", "01 2013", "40", "0", "CZK 2500", "YES", "YES", "NO", "YES", "NO", "YES", "0", "NO:NO:NO", "NO", "YES", "YES", "CZK 2500", "CZK 0", "CZK 2500", "CZK 0", "CZK 0", "CZK 0", "CZK 0", "CZK 375", "CZK 375", "CZK 0", "CZK 0", "CZK 0", "CZK 0", "CZK 0", "CZK 2500", "CZK 2500", null)]
        [NUnit.Framework.TestCaseAttribute("20-DPP-Mzda-10000-NeUcastNemoc", "01 2013", "40", "0", "CZK 10000", "YES", "YES", "NO", "YES", "NO", "YES", "0", "NO:NO:NO", "NO", "YES", "YES", "CZK 10000", "CZK 0", "CZK 10000", "CZK 0", "CZK 0", "CZK 0", "CZK 0", "CZK 1500", "CZK 1500", "CZK 0", "CZK 0", "CZK 0", "CZK 0", "CZK 0", "CZK 10000", "CZK 10000", null)]
        [NUnit.Framework.TestCaseAttribute("21-DPP-Mzda-10001-UcastNemoc", "01 2013", "40", "0", "CZK 10001", "YES", "YES", "NO", "YES", "NO", "YES", "0", "NO:NO:NO", "NO", "YES", "YES", "CZK 10001", "CZK 3401", "CZK 13402", "CZK 10001", "CZK 10001", "CZK 451", "CZK 651", "CZK 2025", "CZK 2025", "CZK 0", "CZK 0", "CZK 0", "CZK 0", "CZK 0", "CZK 10001", "CZK 8899", null)]
        public virtual void PayrollForContract(
                    string name, 
                    string period, 
                    string schedule, 
                    string absence, 
                    string contract, 
                    string taxPayer, 
                    string healthPayer, 
                    string healthMinim, 
                    string socialPayer, 
                    string pensionPayer, 
                    string taxPayerBenefit, 
                    string taxChildBenefit, 
                    string taxDisabilityBenefit, 
                    string taxStudyingBenefit, 
                    string healthEmployer, 
                    string socialEmployer, 
                    string taxIncome, 
                    string premiumInsurance, 
                    string taxBase, 
                    string healthBase, 
                    string socialBase, 
                    string healthIns, 
                    string socialIns, 
                    string taxBefore, 
                    string payerRelief, 
                    string taxAfterARelief, 
                    string childRelief, 
                    string taxAfterCRelief, 
                    string taxAdvance, 
                    string taxBonus, 
                    string grossIncome, 
                    string nettoIncome, 
                    string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Payroll for contract", exampleTags);
#line 89
  this.ScenarioSetup(scenarioInfo);
#line 90
    testRunner.Given(string.Format("Payroll process for payroll period {0}", period), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 91
    testRunner.And(string.Format("Employee works in Weekly schedule {0} hours", schedule), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 92
    testRunner.And(string.Format("Employee has {0} hours of absence", absence), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 93
    testRunner.And(string.Format("Employee Contract is {0} monthly", contract), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 94
    testRunner.And(string.Format("{0} Employee is Regular Tax payer", taxPayer), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 95
    testRunner.And(string.Format("{0} Employee is Regular Health insurance payer with {1}", healthPayer, healthMinim), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 96
    testRunner.And(string.Format("{0} Employee is Regular Social insurance payer", socialPayer), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 97
    testRunner.And(string.Format("{0} Employee is Regular Pension savings payer", pensionPayer), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 98
    testRunner.And(string.Format("{0} Employee claims tax benefit on tax payer", taxPayerBenefit), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 99
    testRunner.And(string.Format("Employee claims tax benefit on {0} child", taxChildBenefit), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 100
    testRunner.And(string.Format("{0} Employee claims tax benefit on disability", taxDisabilityBenefit), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 101
    testRunner.And(string.Format("{0} Employee claims tax benefit on preparing by studying", taxStudyingBenefit), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 102
    testRunner.And(string.Format("{0} Employee is Employer contribution for Health insurance payer", healthEmployer), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 103
    testRunner.And(string.Format("{0} Employee is Employer contribution for Social insurance payer", socialEmployer), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 104
    testRunner.When("Payroll process calculate results", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 105
    testRunner.Then(string.Format("Accounted tax income should be {0}", taxIncome), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 106
    testRunner.And(string.Format("Premium insurance should be {0}", premiumInsurance), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 107
    testRunner.And(string.Format("Tax base should be {0}", taxBase), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 108
    testRunner.And(string.Format("Accounted income for Health insurance should be {0}", healthBase), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 109
    testRunner.And(string.Format("Accounted income for Social insurance should be {0}", socialBase), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 110
    testRunner.And(string.Format("Contribution to Health insurance should be {0}", healthIns), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 111
    testRunner.And(string.Format("Contribution to Social insurance should be {0}", socialIns), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 112
    testRunner.And(string.Format("Tax advance before tax relief on payer should be {0}", taxBefore), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 113
    testRunner.And(string.Format("Tax relief on payer should be {0}", payerRelief), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 114
    testRunner.And(string.Format("Tax advance after relief on payer should be {0}", taxAfterARelief), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 115
    testRunner.And(string.Format("Tax relief on child should be {0}", childRelief), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 116
    testRunner.And(string.Format("Tax advance after relief on child should be {0}", taxAfterCRelief), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 117
    testRunner.And(string.Format("Tax advance should be {0}", taxAdvance), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 118
    testRunner.And(string.Format("Tax bonus should be {0}", taxBonus), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 119
    testRunner.And(string.Format("Gross income should be {0}", grossIncome), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 120
    testRunner.And(string.Format("Netto income should be {0}", nettoIncome), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
